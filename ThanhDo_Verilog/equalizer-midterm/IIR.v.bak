module IIR
#(
    parameter order = 2,
    parameter word_size_in = 16,
    parameter word_size_out = 2 * word_size_in
) (
    input clk,
    input rst_n,
    input [word_size_in-1:0] data_in,
    output reg [word_size_in-1:0] data_out 
);

// CÃ¡c há» sá» bá» lá»c
parameter signed [word_size_in-1:0] b0 = 16'sd6563, b1 = 16'sd0, b2 = -16'sd 6563;
parameter signed [word_size_in-1:0] a1 = 16'sd4609, a2 = 16'sd3259;

// Khai bÃ¡o máº£ng
reg [word_size_in-1:0] sample_in [0:order-1];
reg [word_size_in-1:0] sample_out [0:order-1];
reg [word_size_in-1:0] sample_0;
integer k;

// TÃ­nh toÃ¡n feedforward vÃ  feedback
wire [word_size_out-1:0] data_feedforward = b0*data_in + b1*sample_in[0] + b2*sample_in[1];
wire [word_size_out-1:0] data_feedback = a1*sample_out[0] + a2*sample_out[1];

// GÃ¡n káº¿t quáº£
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        for (k = 0; k < order; k = k + 1) begin
            sample_in[k] <= 0;
            sample_out[k] <= 0;
        end
        data_out <= 0;
    end else begin
        // Cáº­p nháº­t máº«u vÃ o
        sample_in[1] <= sample_in[0];
        sample_in[0] <= data_in;
        
        // Cáº­p nháº­t máº«u ra
        sample_out[1] <= sample_out[0];
        sample_out[0] <= (data_feedback - data_feedforward) >>> 14; 
        data_out <= sample_0;
    end
end
assign sample_0 <= (data_feedback - data_feedforward) >>> 14; 
endmodule

module IIR_filter_tb();
parameter DATA_BIT_NUM = 16;
parameter SAMPLES = 1024;

reg clk, rst_n;
reg signed [DATA_BIT_NUM-1:0] filter_data_in;
wire signed [DATA_BIT_NUM-1:0] filter_data_out;
reg [DATA_BIT_NUM-1:0] data_in_array [0:SAMPLES-1];
integer i;


IIR uut(
    .clk(clk),
    .rst_n(rst_n),
    .data_in(filter_data_in),
    .data_out(filter_data_out)
);

initial begin
    clk = 0;
    forever #10 clk = ~clk; // Äáº£o tráº¡ng thÃ¡i clock má»i 10 time units
end

initial begin
    // Khá»i táº¡o
    rst_n = 0; // KÃ­ch hoáº¡t reset
    filter_data_in = 0;
    i = 0;

    // Äá»c dá»¯ liá»u tá»« file .txt
    $readmemb("C:/THANHDO_LAB_Verilog/DigitalDesign/ThanhDo_Verilog/equalizer-midterm/sin_noise.txt", data_in_array);

    // Thá»±c hiá»n reset trong thá»i gian ngáº¯n
    #10 rst_n = 1;

    // ÄÆ°a dá»¯ liá»u tá»« file .txt vÃ o bá» lá»c
    for (i = 0; i < SAMPLES; i = i + 1) begin
        @ (posedge clk);
        filter_data_in = data_in_array[i];
    end

    // Káº¿t thÃºc mÃ´ phá»ng
    #1000;
    $finish;
end

endmodule


